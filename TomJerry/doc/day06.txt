# day06

JSTL(Java Standard Tag Library)
==> JSP 를 제작하다보면 HTML과 자바가 혼용되어 만들어진다.
	그래서 자바적인 내용을 입력하는 경우 스크립트릿을 사용해서 입력하게 된다.
	==> 이것은 개발자가 뷰 문서를 제작할 때 항상 고민이 된다.
	
	JSTL이란?
	JSP는 HTML이 우선이 되므로
	자바적인 요소 역시 태그 형식으로 사용할 수 있도록 
	(==> 문서를 작성하는 사람이 한가지 형식으로만 만들 수 있다.)
	통일된 방식으로 문서를 만들 수 있도록 만들어 놓은 라이브러리
	
	예 ]
		지금까지는 
		<%
			for(int i = 0 ; i < 10 ; i++ ){
		%>
			HTML 코드
		<%
			}
		%> 
		 	혹은 
		<%= xxx %>
		
		JSTL에서는 
			<c:forEach begin="0" end="10" step="1">
				HTML 코드
			</c:forEach>
			
JSTL 사용방법
	1. JSTL 라이브러리를 다운 받아서 프로젝트의 
		WebContent/WEB-INF/lib
		에 복사해 놓는다.
		
		다운 받아야 할 라이브러리는
			jstl.jar, standard.jar
		두개를 다운받아야 한다.
		
		<== 이 라이브러리는 JSP문서를 제작할 때 사용할 라이브러리이므로
			자바빌드패스에는 등록안해도 되고
			반드시 위의 경로에 복사가 되어 있어야 한다.
			
	2. JSTL이 필요한 문서(JSP문서)에 필요한 라이브러리를 사용할 수 있도록
		등록해 놓는다.
		
		등록방법 ]
			<%@ taglib prefix="???" uri="????" %>
			
참고 ]
	JSTL의 종류
		1. Core tag ***
			==> 일반적인 자바 명령을 태그로 만들어 놓은 라이브러리
			
		2. Formatting tag *
			==> 출력할 때 모양을 지정하기 위한 기능을 태그로 만들어 놓은 라이브러리
			
		3. SQL tag
			==> 데이터베이스를 사용할 때 필요한 기능을 태그로 만들어 놓은 라이브러리
			
		4. XML tag
			==> xml 문서를 처리를 위한 기능을 태그로 만들어 놓은 라이브러리
			
		5. Function tag *
			==> 자바에서 자주 사용하는 함수를 사용할 수 있도록 많들어 놓은 라이브러리
		 
		 
	JSTL 라이브러리 등록 방법
		형식 ]
			<%@ taglib prefix="???" uri="??????" %>
			
			속성 설명 ]
				prefix
					==> 아무것이나 기입해도 상관없다.
						이것의 의미는 
						taglib는 누군가 만들어 놓은 태그를 사용하도록 하는 명령
						자바는 오픈소스이고
						따라서 아무나 소스를 만들수 있다. 물론 배포도 아무나 할 수 있다.
						
						문제점 ]
							태그의 이름이 중복 될 수 있다.
							
						태그를 사용하는 사용자가 각각의 태그를 구분하기 위해서
						부여하는 자신만의 규칙
						
				uri
					==> 이 태그 라이브러리를 제공하는 CDN 네트워크 경로
						또는
						태그 라이브러리 기능을 제공하는 클래스이름을 지정하는 부분
						
			예 ]
				euns
					<print></print> 기능을 만들어서 배포했다.(가정)
									==> 문자열을 화면에 출력해주는 기능을 가진 태그
				
				
				주재석씨
					<print></print> 기능을 만들어서 배포했다.(가정)
									==> 태그를 클릭하면 화면내용을 프린터로 출력해주는 기능을 가진 태그
									
				==>
				사용자 입장에서
					euns가 만든 태그 
							prefix="ln"
					주재석씨가 만든 태그
							prifix="pt"
							
					<ln:print>abcd</ln:print>	==> 화면에 출력하는 태그
					<pt:print>click</pt:print> ==> 프린터로 출력하는 태그
					
		불문율
			1. Core
				<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
				
			2. Formatting
				<%@ taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt" %>
				
			3. SQL
				<%@ taglib prefix="sql" uri="http://java.sun.com/jsp/jstl/sql" %>
				
			4. XML
				<%@ taglib prefix="x" uri="http://java.sun.com/jsp/jstl/xml" %>
				
			5. Function
				<%@ taglib prefix="fn" uri="http://java.sun.com/jsp/jstl/functions" %>
				
---------------------------------------------------------------------------------------------------
실습과제 ]
		데이터베이스에 접근해서
		가입된 회원의 정보를
			회원이름 | 회원아이디 | 전화번호 | 전자메일
		를 폼을 이쁘게 만들어서 (memberList.jsp)
		화면에 출력해주세요.
		
		형식 ]
		
		회원이름 	| 회원아이디 | 		전화번호 	| 	전자메일
		----------------------------------------------------------------------
		우현우			whw			010-1111-1111		whw@increpas.com
		----------------------------------------------------------------------
		유태희			yth			010-2222-2222		yth@increpas.com
		----------------------------------------------------------------------
---------------------------------------------------------------------------------------------------

기능 ]
		
		1. 표현식
			형식 ]
				${출력내용}
			의미 ]
				출력할 내용을 화면에 출력한다.
				출력할 내용은 
					변수, 연산식, 상수 등 모든것이 올 수 있다.
					<%= %>와 같은 기능
					
			예 ]
				컨트롤러에서 
					req.setAttribute("KEY", "홍길동");
				라고 뷰에게 넘겨주면
				뷰에서는 
					<% String name = (String) request.getAttribute("KEY"); %>
				대신에
					${KEY}
				를 사용하면 내용이 출력이 된다.
				
		2.
			<c:out>
			==> 표현식(EL(Expression Language))과 동일하게 뭔가를 출력하는 기능을 가진 태그
			
			형식 ]
				<c:out value="출력내용" />
				
			예 ]
				컨트롤러에서 
					req.setAttribute("KEY", "홍길동");
				이라고 뷰에게 넘겨주면...
					
					<c:out value="${KEY}" />
					
			장점 ]
				동시에 여러개를 출력할 수 있다.
				즉, 스스로가 여러개를 하나의 문자열로 결합해서 출력한다.
				
			예 ]
				<c:out value="${'<tag>, 10'}" />
				==>
					결과
						<tag>, 10
						이 출력된다.
----------------------------------------------------------------------------------------------						
		참고 ]
			JSTL 사용할 때
				1. 몸체가 있는 태그
					<시작태그>
						몸체
					</시작태그>
					
				2. 몸체가 없는 태그
					<태그 기능 ..... />
----------------------------------------------------------------------------------------------
		*
		3. <c:set>
			==> 변수에 데이터를 기억해 놓는 기능을 가진 태그
				
				형식  ]
					<c:set var="변수이름" value="데이터" />
				예 ]
					<c:set var="name" value="홍길동" />
						==> String name = "홍길동";
						
					==> 
					사용
						${name}
				참고 ]
					기억할 데이터는 무엇이든지 상관이 없다.
					
					예 ]
						<c:set var="age" value="24" />
						
		4. 
			<c:remove>
			==> 변수의 데이터를 강제로 삭제하는 기능을 가진 태그
				
				형식 ]
					<c:remove var="삭제할 변수" />
				예 ]
					<c:remove var="name" />
					
					
		***
		5.
			<c:if>
			==> 자바의 if 명령에 해당하는 기능을 가진 태그
			
			형식 ]
				<c:if test="조건식">
					몸체
				</c:if>
				==> 조건식이 참이면 몸체 부분을 실행하세요.
				
			참고 ]
				아직은 else, else if 의 기능이 존재하지 않는다.
				따라서
				만약 else 구문이 필요하면 
				앞의 조건시의 반대 조건식을 이용해서 다시 <c:if> 태그를 만들어줘야 한다.
				
		*****
		JSTL 에서 조건식을 만들 때 조건 연산자를 
			1. 자바에서 사용하는 조건 연산자를 사용해도 되고
			2. JSTL 연산자를 이용해도 된다.
				eq	:	==
				lt	: 	<
				le	: 	<=
				gt	: 	>
				ge	: 	>=
				ne	:	!=
				
				and	: 	&&
				or	:	||
				not	:	!
				
				empty	: 	비어있니???
				
				예 ]
					[컨트롤러]
					ArrayList list = new ArrayList();
					데이터베이스에서 꺼낸 데이터를 list에 담는다.
					req.setAttribute("LIST", list);
					
					[뷰]
					<c:if test="${empty LIST}" >
						<h2 class="w3-text-red w3-center">조회된 데이터가 없습니다.</h2>
					</c:if>
		
		*****
		6. 
			<c:choose>
			==> 자바의 switch case와 유사한 기능을 가진 
				다중 조건 처리 명령을 위한 태그
				
			형식 ]
				<c:choose>
					<c:when test="조건식1">
						처리내용1
					</c:when>
					<c:when test="조건식2">
						처리내용2
					</c:when>
					<c:when test="조건식3">
						처리내용3
					</c:when>
					....
					<c:otherwise>
						기본처리내용
					</c:otherwise>
				</c:choose>
				
			참고 ]
				한개라도 <c:when> 이 맞으면 그것만 처리하고
				<c:choose>를 종료한다.
		
		*****
		7. 
			<c:forEach>
			==> 자바의 for 명령을 태그로 만들어 놓은 기능
			
			형식 1]
				<c:forEach var="변수이름" begin="시작값" end="종료값" step="증감값">
					처리내용
				</c:forEach>
				
				주의 ]
					end의 종료값은 포함을 시킨다.
					즉, end 값 까지 반복이 되어진다.
					
				참고 ]
					step이 1인 경우는 생략해도 무방하다.
					
			형식 2]
				<c:forEach var="변수이름" items="컬렉션 또는 배열">
					처리내용
				</c:forEach>
				==> 자바의 향상된 for 명령에 해당하는 태그
					컬렉션이나 배열의 내용이 변수에 한개씩 꺼내져서 기억이 되고
					저장된 갯수만큼 반복을 해준다.
					
			참고 ]
				forEach 태그에는 varStatus라는 속성을 사용할 수 있다.
				이 속성은 반복상태를 기억하는 역할을 담당한다.
				
				예 ]
					<c:forEach var="..." varStatus="변수이름"
						변수이름에는 [ 반복상태 ]가 기억된다.
					</c:forEach>
					
					반복상태 ]
						current	- 현재 꺼낸 데이터가 기억된다.
						index	- 현재 몇번째 반복인지 인덱스로 기억한다.
						count	- 현재 몇번째 반복인지 횟수로 기억한다.
						first	- 현재 반복이 첫번째 반복인지 아닌지 참|거짓으로 기억
						last	- 현재 반복이 마지막 반복인지 아닌지를 참|거짓으로 기억
						begin	- 시작값
						end		- 종료값
						step	- 증감값	을 기억한다.
						
		8.
			<c:forTokens>
			==> 하나의 문자열을 지정한 기호로 분리시켜서 반복하는 태그
				자바의 StringTokenizer 와 비슷한 역할을 한다.
				
				형식 ]
					<c:forTokens var="변수" items="데이터" delims="구분자">
					</c:forTokens>
					
				참고 ]
					delims 에는 여러개의 구분문자를 동시에 사용할 수 있다.
					
		9.
			<c:redirect>
			==> 강제로 요청을 변경하는
				response.sendRedirect()에 해당하는 태그
				
			형식 1]
				<c:redirect url="새로운요청" />
				==> 일반요청
				
			형식 2]
				<c:redirect url="새로운요청">
					<c:param name="키값1" value="데이터1" />
					<c:param name="키값2" value="데이터2" />
					<c:param name="키값3" value="데이터3" />
					.....
				</c:redirect>
				
				==> 새로운 요청을 만들면서 부가정보(데이터)를 제공하는 방식
				
				
--------------------------------------------------------------------------------------------------

JSP 내장객체의 영역
	
	1. pageScope
		==> page 기본 객체에 저장된 속성의 <속성, 데이터> 매핑을 지정한 Map 객체
	2. requestScope
		==> request 기본 객체에 저장된 속성의 매핑을 저장한 Map객체
	3. sessionScope
		==> session .....
	4. applicationScope
		==> application .....
	5. param
		==> 파라미터 값을 얻어올 때 사용
	6. paramValues
		==> 파리미터 값을 배열형태로 얻어올 때 사용
	7. cookie
		==> 쿠키 객체를 참조할 때 사용
	8. initParam
		==> 컨텍스트의 초기화 파라미터를 의미
	9. pageContext
		==> 
	
		
		
	EL을 사용할 때 원칙적으로 변수를 기술을 할 때
	반드시 영역을 지정을 해줘야한다.
		
		${requstScope.id}
	
	***	
	session, request에 한해서는 역을 구분하지 않아도 처리가 되도로 해놓았다.
	
	
		예 ]
			세션에 저장된 아이디를 불러올 경우
				==> ${SID}
				
			파라미터로 넘어온 아이디 불러올 경우 ( 키값이 SID 인 경우)
				==> ${SID}
				
--------------------------------------------------------------------------------------------------


					
					